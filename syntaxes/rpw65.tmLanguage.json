{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "scopeName": "source.rpw65",
  "name": "rpw65",
  "patterns": [
    {
      "include": "#comments"
    },
    {
      "include": "#keywords-acme"
    },
    {
      "include": "#keywords-ca65"
    },
    {
      "include": "#keywords-dasm"
    },
    {
      "include": "#keywords-lisa"
    },
    {
      "include": "#keywords-merlin"
    },
    {
      "include": "#keywords-64tass"
    },
    {
      "include": "#mnemonics-6502"
    },
    {
      "include": "#mnemonics-65C02"
    },
    {
      "include": "#mnemonics-65816"
    },
    {
      "include": "#strings"
    },
    {
      "include": "#numbers"
    }
  ],
  "repository": {
    "comments": {
      "patterns": [
        {
          "name": "comment.line.rpw65",
          "begin": "^;",
          "end": "\\n"
        },
        {
          "name": "comment.line.rpw65",
          "begin": "^\\*",
          "end": "\\n"
        },
        {
          "name": "comment.line.rpw65",
          "begin": "\\s;",
          "end": "\\n"
        }
      ]
    },
    "strings": {
      "patterns": [
        {
          "name": "string.quoted.double.rpw65",
          "begin": "\"",
          "end": "\"",
          "patterns": [
            {
              "include": "#string-character-escape"
            }
          ]
        },
        {
          "name": "string.quoted.single.rpw65",
          "begin": "'",
          "end": "'",
          "patterns": [
            {
              "include": "#string-character-escape"
            }
          ]
        }
      ]
    },
    "string-character-escape": {
      "patterns": [
        {
          "name": "constant.character.escape.rpw65",
          "match": "\\\\."
        }
      ]
    },
    "numbers": {
      "patterns": [
        {
          "name": "constant.numeric.integer.hexadecimal.rpw65",
          "match": "\\b\\$?\\h+\\b"
        },
        {
          "name": "constant.numeric.integer.binary.rpw65",
          "match": "\\b%[01]+\\b"
        },
        {
          "name": "constant.numeric.integer.decimal.rpw65",
          "match": "\\b\\-?\\d+\\b"
        }
      ]
    },
    "keywords-acme": {
      "patterns": [
        {
          "name": "keyword.control.rpw65",
          "match": "(^|\\s)!(?i:08|8|16|24|32|addr|address|al|align|as|autsiz|be16|be24|be32|bin|binary|by|byte|convtab|cpu|ct|databank|dpage|do|endoffile|eof|error|fi|fill|for|h|hex|if|ifdef|ifndef|initmem|le16|le24|le32|macro|mansiz|pet|pseudopc|raw|rl|rs|scr|scrxor|serious|set|skip|sl|source|src|svl|symbollist|text|to|tx|warn|while|wo|word|xl|xor|xs|zn|zone)\\s"
        }
      ]
    },
    "keywords-ca65": {
      "patterns": [
        {
          "name": "keyword.control.rpw65",
          "match": "(^|\\s).(?i:a16|a8|addr|align|asciiz|asize|assert|bankbytes|bss|byt|byte|charmap|code|condes|constructor|cpu|data|dbyt|define|delmac|delmacro|destructor|dword|else|elseif|end|endenum|endif|endmac|endmacro|endproc|endrep|endrepeat|endscope|endstruct|endunion|enum|error|exitmac|exitmacro|export|exportzp|faraddr|fatal|feature|fileopt|fopt|forceimport|global|globalzp|hibytes|i8|i16|if|ifblank|ifconst|ifdef|ifnblank|ifndef|ifnref|ifref|import|importzp|incbin|include|interruptor|isize|listbytes|literal|lobytes|local|localchar|mac|macpack|macro|org|out|pagelen|pagelength|paramcount|popcharmap|popcpu|popseg|proc|pushcharmap|pushcpu|pushseg|referto|refto|reloc|repeat|res|rodata|scope|segment|set|setcpu|struct|tag|time|undef|undefine|union|version|warning|word|zeropage)\\s"
        },
        {
          "name": "keyword.control.rpw65",
          "match": "(^|\\s).(?i:autoimport|case|debuginfo|linecont|list|smart)(\\+|\\-)?\\s"
        }
      ]
    },
    "keywords-dasm": {
      "patterns": [
        {
          "name": "keyword.control.rpw65",
          "match": "\\s(?i:align|byte|echo|eif|elif|else|end|endif|endm|err|eqm|equ|hex|if|ifconst|ifnconst|incbin|incdir|include|mac|macro|mexit|list|long|org|processor|rend|repeat|repend|rorg|set|setstr|subroutine|word)\\s"
        },
        {
          "name": "keyword.control.rpw65",
          "match": "\\s(?i:dc(.(?i:b|w|l|s))?|ds(.(?i:b|w|l))?|dv(.(?i:b|w|l))?|seg(.u)?)\\s"
        }
      ]
    },
    "keywords-lisa": {
      "patterns": [
        {
          "name": "keyword.control.rpw65",
          "match": "\\s(?i:.da|.el|.if|.fi|adr|asc|blk|byt|dby|dci|dcm|dfs|dph|epz|equ|gen|hby|hex|icl|inv|let|lst|nls|nog|obj|org|pag|pau|phs|sav|str|ttl|usr)\\s"
        }
      ]
    },
    "keywords-merlin": {
      "patterns": [
        {
          "name": "keyword.control.rpw65",
          "match": "\\s(?i:adr|adrl|asc|ast|chk|cyc|da|dat|db|dci|ddb|dend|dfb|do|ds|dsk|dum|dummy|dw|else|end|ent|eom|equ|err|exp|ext|fin|fls|hex|if|inv|kbd|lst|lstdo|lup|mac|mx|obj|org|pag|page|pau|pmc|put|rel|rev|sav|skp|str|sw|tr|ttl|typ|usr|txc|txi|txt|use|var|xc|<<<|>>>|--\\^)\\s"
        }
      ]
    },
    "keywords-64tass": {
      "patterns": [
        {
          "name": "keyword.control.rpw65",
          "match": "(^|\\s).(?i:bend|bfor|binary|binclude|block|break|breakif|brept|bwhile|byte|addr|align|alignblk|alignind|alignpageind|case|cdef|cerror|char|comment|continue|continueif|cp|cwarn|default|dint|dsection|dstruct|dunion|dword|edef|else|elsif|enc|encode|end|endalignblk|endblock|endc|endcomment|endencode|endf|endfor|endfunction|endif|endlogical|endm|endmacro|endn|endnamespace|endp|endpage|endproc|endrept|ends|endsection|endsegment|endstruct|endswitch|endu|endunion|endv|endvirtual|endwhile|endweak|endwith|eor|error|fi|fill|for|from|function|goto|here|if|ifeq|ifmi|ifne|ifpl|include|lbl|logical|long|lint|macro|namespace|next|null|offs|option|page|pend|proc|proff|pron|ptext|rept|rta|section|seed|segment|send|sfunction|shift|shiftl|sint|struct|switch|tdef|text|union|var|virtual|warn|weak|while|with|word)\\s"
        }
      ]
    },
    "mnemonics-6502": {
      "patterns": [
        {
          "name": "keyword.mnemonic.rpw65",
          "match": "\\s(?i:LDA|LDX|LDY|STA|STX|STY)\\s"
        },
        {
          "name": "keyword.mnemonic.rpw65",
          "match": "\\s(?i:TAX|TAY|TXA|TYA|TSX|TXS|PHA|PHP|PLA|PLP)\\s"
        },
        {
          "name": "keyword.mnemonic.rpw65",
          "match": "\\s(?i:AND|EOR|ORA|BIT|ADC|SBC|CMP|CPX|CPY)\\s"
        },
        {
          "name": "keyword.mnemonic.rpw65",
          "match": "\\s(?i:INC|INX|INY|DEC|DEX|DEY|ASL|LSR|ROL|ROR)\\s"
        },
        {
          "name": "keyword.mnemonic.rpw65",
          "match": "\\s(?i:JMP|JSR|RTS|BCC|BCS|BEQ|BMI|BNE|BPL|BVC|BVS)\\s"
        },
        {
          "name": "keyword.mnemonic.rpw65",
          "match": "\\s(?i:CLC|CLD|CLI|CLV|SEC|SED|SEI|BRK|NOP|RTI)\\s"
        }
      ]
    },
    "mnemonics-65c02": {
      "patterns": [
        {
          "name": "keyword.mnemonic.rpw65",
          "match": "\\s(?i:bra|phx|phy|plx|ply|stz|trb|tsb)\\s"
        }
      ]
    },
    "mnemonics-65816": {
      "patterns": [
        {
          "name": "keyword.mnemonic.rpw65",
          "match": "\\s(?i:brl|cop|jsl|mvn|mvp|pea|pei|per|phb|phd|phk|plb|pld|rep|rtl|sep|tcd|tcs|tdc|tsc|txy|tyx|wdm|xba|xce)\\s"
        }
      ]
    }
  }
}
